
1. 正则表达式的界定符一般为//，如/[0-9]/，也可以是 #[0-9]# 或者 {[0-9]}。
   但是由于大括号在正则中也可以作为运算符存在，所以一般不使用大括号为其界定符

2. 辅助书写正则表达式的工具 regexpal 可以方便进行正则测试
   网上测试网址为 http://regexpal.isbadguy.com/

3. 不区分大小写 i
   忽略换行符 m
   匹配所有 s

4. 原子：是正则表达式中最小的匹配单位，分为可见原子和不可见原子
   可见原子：Unicode编码表中用键盘输出后肉眼可见的字符，如逗号等
   不可见原子：Unicode编码表中用键盘输出后肉眼不可见的字符，如空格，tab（\t），回车（\r），换行符（\n）等

5. 文字匹配最好先转化成unicode编码，推荐使用转换工具 http://tool.chinaz.com/Tools/Unicode.aspx?jdfwkey=yhm4x

6. 不可见原子匹配 ，空格直接敲空格就行，制表符输入\t，换行符\n，回车\r

7. 元字符之原子的筛选方式
   | 匹配两个或者多个分支选择
   [] 匹配方括号来的任意一个原子
   [^] 匹配方括号中的原子之外的任意字符

8. 元字符之原子集合
   .    匹配除换行符之外的任意字符
   \d   匹配一个十进制数字，即[0-9]
   \D   匹配一个非十进制数字，即[^0-9]
   \s   匹配一个不可见原子，即[\f\n\r\t\v]
   \S   匹配一个可见原子，即[^\f\n\r\t\v]
   \w   匹配任意一个数字、字母或者下划线，即[0-9a-zA-Z_]
   \W   匹配任意一个数字、字母或者下划线，即[^0-9a-zA-Z_]

9. 量词
   {n}   表示其前面的原子恰好出现n次
   {n,}  表示其前面的原子至少出现n次
   {n,m} 表示其前面的原子最少出现n次，最多出现m次
   *     匹配0次，1次或者多次其之前的原子，即{0,}
   +     匹配1次或者多次之前的原子，即{1,}
   ?     匹配0次或者1次之前的原子，即{0,1}

10. 边界控制
   ^   匹配字符串开始位置
   $   匹配字符串结束位置
   ()  匹配其中的整体为一个原子

11. 模式单元，如 (D|d)uang

12. 懒惰匹配与贪婪匹配
    懒惰匹配：匹配结果存在歧义时取其短，代表字符 U
    贪婪匹配：匹配结果存在歧义时取其长

    $pattern = '/lugui.+123/';
    $subject = 'I love lugui__123123123123123123123123';
    $matches = array();
    preg_match($pattern,$subject,$matches);
    默认使用的是贪婪模式，改为懒惰模式则变为 /lugui.+123/U


13. 常见的修正模式 
	/lugui.+123/Ui  表示可以同时使用多个修正模式
    U  懒惰匹配
    i  忽略英文字母大小写
    x  忽略空白字符
    s  让元字符`.`匹配包含换行符在内的所有字符
    e  















